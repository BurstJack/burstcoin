syntax = "proto3";
import "google/protobuf/empty.proto";
import "google/protobuf/any.proto";
option java_package = "brs.grpc.proto";

service BrsApiService {
    rpc BroadcastTransaction(TransactionBytes) returns (TransactionBroadcastResult) {}
    rpc GetAccount(GetAccountRequest) returns (Account) {}
    rpc GetAccountATs(GetAccountRequest) returns (TODO) {}
    rpc GetAccountBlockIds(GetAccountRequest) returns (TODO) {}
    rpc GetAccountBlocks(GetAccountRequest) returns (TODO) {}
    rpc GetAccountCurrentAskOrderIds(TODO) returns (TODO) {}
    rpc GetAccountCurrentAskOrders(TODO) returns (TODO) {}
    rpc GetAccountCurrentBidOrderIds(TODO) returns (TODO) {}
    rpc GetAccountCurrentBidOrders(TODO) returns (TODO) {}
    rpc GetAccountEscrowTransactions(GetAccountRequest) returns (TODO) {}
    rpc GetAccounts(GetAccountsRequest) returns (Accounts) {}
    rpc GetAccountSubscriptions(GetAccountRequest) returns (TODO) {}
    rpc GetAccountTransactionIds(TODO) returns (TODO) {}
    rpc GetAccountTransactions(TODO) returns (TODO) {}
    rpc GetAlias(GetAliasRequest) returns (Alias) {}
    rpc GetAliases(TODO) returns (TODO) {}
    rpc GetAllAssets(TODO) returns (TODO) {}
    rpc GetAllOpenAskOrders(TODO) returns (TODO) {}
    rpc GetAllOpenBidOrders(TODO) returns (TODO) {}
    rpc GetAllTrades(TODO) returns (TODO) {}
    rpc GetAskOrder(TODO) returns (TODO) {}
    rpc GetAskOrderIds(TODO) returns (TODO) {}
    rpc GetAskOrders(TODO) returns (TODO) {}
    rpc GetAsset(TODO) returns (TODO) {}
    rpc GetAssetAccounts(TODO) returns (TODO) {}
    rpc GetAssetIds(TODO) returns (TODO) {}
    rpc GetAssets(TODO) returns (TODO) {}
    rpc GetAssetsByIssuer(TODO) returns (TODO) {}
    rpc GetAssetTransfers(TODO) returns (TODO) {}
    rpc GetAT(TODO) returns (TODO) {}
    rpc GetATIds(TODO) returns (TODO) {}
    rpc GetBalance(GetAccountRequest) returns (TODO) {}
    rpc GetBidOrder(TODO) returns (TODO) {}
    rpc GetBidOrderIds(TODO) returns (TODO) {}
    rpc GetBidOrders(TODO) returns (TODO) {}
    rpc GetBlock(GetBlockRequest) returns (Block) {}
    rpc GetConstants(google.protobuf.Empty) returns (TODO) {}
    rpc GetDGSGood(TODO) returns (TODO) {}
    rpc GetDGSGoods(TODO) returns (TODO) {}
    rpc GetDGSPendingPurchases(TODO) returns (TODO) {}
    rpc GetDGSPurchase(TODO) returns (TODO) {}
    rpc GetDGSPurchases(TODO) returns (TODO) {}
    rpc GetECBlock(TODO) returns (TODO) {}
    rpc GetEscrowTransaction(TODO) returns (TODO) {}
    rpc GetMiningInfo(google.protobuf.Empty) returns (stream MiningInfo) {}
    rpc GetPeer(GetPeerRequest) returns (Peer) {}
    rpc GetPeers(GetPeersRequest) returns (Peers) {}
    rpc GetState(google.protobuf.Empty) returns (State) {}
    rpc GetSubscription(TODO) returns (TODO) {}
    rpc GetSubscriptionsToAccount(TODO) returns (TODO) {}
    rpc GetCurrentTime(google.protobuf.Empty) returns (Time) {}
    rpc GetTrades(TODO) returns (TODO) {}
    rpc GetTransaction(GetTransactionRequest) returns (Transaction) {}
    rpc GetUnconfirmedTransactionIds(TODO) returns (TODO) {}
    rpc GetUnconfirmedTransactions(TODO) returns (TODO) {}
    rpc ParseTransaction(TransactionBytes) returns (BasicTransaction) {}
    rpc CreateTransaction(BasicTransaction) returns (CreateTransactionResponse) {}
    rpc SubmitNonce(SubmitNonceRequest) returns (SubmitNonceResponse) {}
    rpc SuggestFee(google.protobuf.Empty) returns (FeeSuggestion) {}
}

message BasicTransaction {
    bytes sender = 1;
    uint64 recipient = 2;
    uint32 version = 3; // Will be auto-filled based on attachment
    uint32 type = 4; // Will be auto-filled based on attachment
    uint32 subtype = 5; // Will be auto-filled based on attachment
    uint64 amount = 6;
    uint64 fee = 7;
    uint32 timestamp = 8; // Will be auto-filled if not provided
    uint32 deadline = 9;
    repeated google.protobuf.Any appendages = 10;
    google.protobuf.Any attachment = 11;
    bytes referencedTransactionFullHash = 12;
}

message GetPeerRequest {
    string peerAddress = 1;
}

message GetPeersRequest {
    bool active = 1;
    PeerState state = 2;
}

enum PeerState {
    NON_CONNECTED = 0;
    CONNECTED = 1;
    DISCONNECTED = 2;
}

message Peer {
    PeerState state = 1;
    string announcedAddress = 2;
    bool shareAddress = 3;
    uint64 downloadedVolume = 4;
    uint64 uploadedVolume = 5;
    string application = 6;
    string version = 7;
    string platform = 8;
    bool blacklisted = 9;
    uint32 lastUpdated = 10;
}

message Peers {
    repeated string peerAddresses = 1;
}

message GetAliasRequest {
    uint64 id = 1;
    string name = 2;
}

message Alias {
    uint64 id = 1;
    uint64 owner = 2;
    string name = 3;
    string uri = 4;
    uint32 timestamp = 5;
}

message Time {
    uint32 time = 1;
}

message State {
    string application = 1;
    string version = 2;
    Time time = 3;
    uint64 lastBlock = 4;
    string cumulativeDifficulty = 5;
    uint64 totalEffectiveBalance = 6;
    uint32 numberOfPeers = 7;
    uint32 numberOfForgers = 8;
    string lastBlockchainFeeder = 9;
    uint32 lastBlockchainFeederHeight = 10;
    bool isScanning = 11;
    uint32 availableProcessors = 12;
    uint64 maxMemory = 13;
    uint64 totalMemory = 14;
    uint64 freeMemory = 15;
}

message FeeSuggestion {
    uint64 cheap = 1;
    uint64 standard = 2;
    uint64 priority = 3;
}

message TransactionBroadcastResult {
    uint64 id = 1;
    bytes fullHash = 2;
}

message CreateTransactionResponse {
    bytes unsignedTransactionBytes = 1;
    BasicTransaction transaction = 2;
}

message TODO {

}

message GetBlockRequest {
    uint64 id = 1;
    uint32 height = 2;
    uint32 timestamp = 3;
    bool includeTransactions = 4;
}

message GetAccountRequest {
    uint64 id = 1;
}

message GetAccountsRequest {
    uint64 rewardRecipient = 1;
    string name = 2;
    bool includeAccounts = 3;
}

message GetTransactionRequest {
    uint64 id = 1;
    bytes fullHash = 2;
}

message SubmitNonceRequest {
    string secretPhrase = 1;
    uint64 nonce = 2;
    uint64 account = 3;
    uint32 blockHeight = 4;
}

message SubmitNonceResponse {
    uint64 deadline = 1;
}

message Block {
    uint64 id = 1;
    uint32 height = 2;
    uint32 numberOfTransactions = 3;
    uint64 totalAmount = 4;
    uint64 totalFee = 5;
    uint64 blockReward = 6;
    uint64 payloadLength = 7;
    int32 version = 8;
    uint64 baseTarget = 9;
    uint32 timestamp = 10;
    bytes generationSignature = 11;
    bytes blockSignature = 12;
    bytes payloadHash = 13;
    repeated Transaction transactions = 14;
    repeated uint64 transactionIds = 15;
    bytes generatorPublicKey = 16;
    uint64 nonce = 17;
    uint32 scoop = 18;
    uint64 previousBlock = 19;
    uint64 nextBlock = 20;
    bytes previousBlockHash = 21;
}

message Transaction {
    BasicTransaction transaction = 1;
    uint64 id = 2;
    bytes transactionBytes = 3;
    uint64 block = 4;
    uint32 blockHeight = 5;
    uint32 blockTimestamp = 6;
    bytes signature = 7;
    bytes fullHash = 8;
    sint32 confirmations = 9;
    uint64 ecBlockId = 10;
    uint32 ecBlockHeight = 11;
}

message MessageAppendix {
    uint32 version = 1;
    bytes message = 2;
    bool isText = 3;
}

message EncryptedMessageAppendix {
    uint32 version = 1;
    bytes data = 2;
    bytes nonce = 3;
    bool isText = 4;
    Type type = 5;

    enum Type {
        TO_RECIPIENT = 0;
        TO_SELF = 1;
    }
}

message PublicKeyAnnouncementAppendix {
    uint32 version = 1;
    bytes recipientPublicKey = 2;
}

message MultiOutAttachment {
    uint32 version = 1;
    repeated MultiOutRecipient recipients = 2;

    message MultiOutRecipient {
        uint64 recipient = 1;
        uint64 amount = 2;
    }
}

message MultiOutSameAttachment {
    uint32 version = 1;
    repeated uint64 recipients = 2;
}

message AliasAssignmentAttachment {
    uint32 version = 1;
    string name = 2;
    string uri = 3;
}

message AliasSellAttachment {
    uint32 version = 1;
    string name = 2;
    uint64 price = 3;
}

message AliasBuyAttachment {
    uint32 version = 1;
    string name = 2;
}

message AccountInfoAttachment {
    uint32 version = 1;
    string name = 2;
    string description = 3;
}

message AssetIssuanceAttachment {
    uint32 version = 1;
    string name = 2;
    string description = 3;
    uint64 quantity = 4;
    uint32 decimals = 5;
}

message AssetTransferAttachment {
    uint32 version = 1;
    uint64 id = 2;
    uint64 quantity = 3;
    string comment = 4;
}

message AssetOrderPlacementAttachment {
    uint32 version = 1;
    uint64 id = 2;
    uint64 quantity = 3;
    uint64 price = 4;
    Type type = 5;

    enum Type {
        ASK = 0;
        BID = 1;
    }
}

message AssetOrderCancellationAttachment {
    uint32 version = 1;
    uint64 orderId = 2;
    Type type = 3;

    enum Type {
        ASK = 0;
        BID = 1;
    }
}

message DigitalGoodsListingAttachment {
    uint32 version = 1;
    string name = 2;
    string description = 3;
    string tags = 4;
    uint32 quantity = 5;
    uint64 price = 6;
}

message DigitalGoodsDelistingAttachment {
    uint32 version = 1;
    uint64 goodsId = 2;
}

message DigitalGoodsPriceChangeAttachment {
    uint32 version = 1;
    uint64 goodsId = 2;
    uint64 price = 3;
}

message DigitalGoodsQuantityChangeAttachment {
    uint32 version = 1;
    uint64 goodsId = 2;
    sint32 deltaQuantity = 3;
}

message DigitalGoodsPurchaseAttachment {
    uint32 version = 1;
    uint64 goodsId = 2;
    uint32 quantity = 3;
    uint64 price = 4;
    uint32 deliveryDeadlineTimestmap = 5;
}

message DigitalGoodsDeliveryAttachment {
    uint32 version = 1;
    uint64 purchaseId = 2;
    uint64 discount = 3;
    bytes data = 4;
    bytes nonce = 5;
    bool isText = 6;
}

message DigitalGoodsFeedbackAttachment {
    uint32 version = 1;
    uint64 purchaseId = 2;
}

message DigitalGoodsRefundAttachment {
    uint32 version = 1;
    uint64 purchaseId = 2;
    uint64 refund = 3;
}

message EffectiveBalanceLeasingAttachment {
    uint32 version = 1;
    uint32 period = 2;
}

message RewardRecipientAssignmentAttachment {
    uint32 version = 1;
}

message EscrowCreationAttachment {
    uint32 version = 1;
    uint64 amount = 2;
    uint32 requiredSigners = 3;
    repeated uint64 signers = 4;
    uint32 deadline = 5;
    EscrowDecisionType deadlineAction = 6;
}

message EscrowSignAttachment {
    uint32 version = 1;
    uint64 escrowId = 2;
    EscrowDecisionType decision = 3;
}

message EscrowResultAttachment {
    uint32 version = 1;
    uint64 escrowId = 2;
    EscrowDecisionType decision = 3;
}

message SubscriptionSubscribeAttachment {
    uint32 version = 1;
    uint32 frequency = 2;
}

message SubscriptionCancelAttachment {
    uint32 version = 1;
    uint64 subscriptionId = 2;
}

message SubscriptionPaymentAttachment {
    uint32 version = 1;
    uint64 sucscriptionId = 2;
}

message ATCreationAttachment {
    uint32 version = 1;
    string name = 2;
    string description = 3;
    bytes creationBytes = 4;
}

enum EscrowDecisionType {
    UNDECIDED = 0;
    RELEASE = 1;
    REFUND = 2;
    SPLIT = 3;
}

message Accounts {
    repeated uint64 accountIDs = 1;
    repeated Account accounts = 2;
}

message Account {
    uint64 id = 1;
    bytes publicKey = 2;
    uint64 balance = 3;
    uint64 unconfirmedBalance = 4;
    uint64 forgedBalance = 5;
    string name = 6;
    string description = 7;
    uint64 rewardRecipient = 8;
    repeated AssetBalance assetBalances = 9;
}

message AssetBalance {
    uint64 id = 1;
    uint64 balance = 2;
    uint64 unconfirmedBalance = 3;
}

message MiningInfo {
    uint32 height = 1;
    bytes generationSignature = 2;
    uint64 baseTarget = 3;
}

message TransactionBytes {
    bytes transactionBytes = 1;
}
